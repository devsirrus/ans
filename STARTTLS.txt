postfix STARTTLS検証
■目的
STARTTLSの受信に必要な証明書はDNSのMXレコードに設定したメールサーバ名であることを確認する。
→ドメインが何であろうと、MX指定のメールサーバが同じなら、証明書は一つでいい。

■環境
CentOS7 + postfix + Let's Encrypt 
証明書はオレオレじゃないものを取ったが、インターネット経由で25やり取りはハードル高いのでローカルNW検証行う。

■構成
受信メールサーバ(内部メールサーバ -> internet) ：mail.an-net.tokyo
送信メールサーバ(Internet -> 内部メールサーバ)：c7-02.home

■ドメイン(DNS)　foo.an-net.tokyoとbar.an-net.tokyoのMXを同じにする。
foo.an-net.tokyo  IN MX mail.an-net.tokyo
bar.an-net.tokyo IN MX mail.an-net.tokyo
mail.an-net.tokyo IN A 受信メールサーバのIP

home IN MX c7-02.home
c7-02.home IN A 送信メールサーバのIP

■証明書
mail-an-net.tokyo(Let's Encrypt)
c7-02.home(自己署名証明書) 

■手順
■Let's Encrypt 証明書発行は済とする
■ postfixの設定[受信側 mail.an-net.tokyo] -------------------------------------------------
https://oxynotes.com/?p=4646
https://www.sendmagic.jp/techinfo/starttls-postfix/
https://qiita.com/sudnonk12/items/803f1fb5e5512d35f8c5
http://www.cory.jp/98/postfix.html#verify
★main.cfの設定 ----- * ----- * ----- * ----- * ----- *
vi /etc/postfix/main.cf
▼メール受信(smtpd)の設定
#TLSを使用する設定。
smtpd_tls_security_level = may

# 公開鍵(証明書)を指定。今回は検証なので証明書や鍵のディレクトリはそのままにした
# postfixは中間証明書がある場合は別々に扱えずcatで結合する必要がある。
# fullchaim.pemは証明書 + 中間証明書なのでこっちを設定する
smtpd_tls_cert_file = /etc/letsencrypt/live/mail.an-net.tokyo/fullchain.pem
 
#秘密鍵を指定。
smtpd_tls_key_file =/etc/letsencrypt/live/mail.an-net.tokyo/privkey.pem

# TLSセッションキャッシュデータベースの設定(効率化の設定?)postmapはいらないっぽい?
# 入れるとエラー吐くので今回は設定見送り。
# smtpd_tls_session_cache_database = btree:/var/spool/postfix/smtpd_scache

# TLSログの設定(0~5。0がデフォルト。4以上はデバック用で非推奨)
#0	TLS行動に関するログ記録を無効にします。
#1	TLSハンドシェイクと証明書の情報をログに記録します。
#2	TLSネゴシエーションの間のレベルをログに記録します。
#3	TLSネゴシエーションプロセスの16進数およびASCIIダンプをログに記録します。
#4	STARTTLS以降の通信の16進数およびASCIIダンプを完全にログに記録します。
smtpd_tls_loglevel = 1

▼メール送信(smtp)の設定
# TLSを使用する設定。
smtp_tls_security_level = may
# TLSログ
smtp_tls_loglevel  = 1

# TLSセッションキャッシュデータベースの設定(効率化の設定?) 
# smtpd_tls_session_cache_databaseとファイルは分ける必要がある。
# 同じく見送り
# smtp_tls_session_cache_database = btree:/var/spool/postfix/smtp_scache

#★検証用設定
#  これを入れないとServer Ceriticateを省略する動作が見られ、証明書が正しいか確認できなかった。
#  証明書がちゃんとしていても送る側(internet側)のpostfixのmaillogに「Untrusted TLS connection established」と出る。超はまった。。。
# Client HelloのChiper Suitesの中に証明書を使わずに公開鍵交換を行う Anonymous Diffie-Hellman(DH_anon)系の暗号化スイートが選択されていたことが原因。
# そのためDH_anonで合意されServer Helloの後にServer Ceriticateが返されない。
# したがって証明書検証が行われず「Untrusted」となる。証明書がおかしくてもこれが出るので大変分かりにくい。
# 根本的にはpostfixの暗号化スイートでanon_DHを供しているのが原因なので送信/受信側どちらかで除外すれば証明書がOKかがわかる。

# サーバ側にこれを入れるとサーバー認証なしを除外できる。本利用ではこちらのサーバを認証するかは接続元に委ねるべきなので検証用設定。
smtpd_tls_exclude_ciphers = aNULL

# 送る側の検証機にいれる場合は以下。こちらが適している。
smtp_tls_exclude_ciphers = aNULL

# ちゃんと検証できるとログはこうなる
Trusted TLS connection established to mail.an-net.tokyo[192.168.0.152]:

# 暗号化スイート強度をhighに指定するのは意味がなかった。(default medium)
# また、smtp(d)_tls_security_level = may(できたらTLSする)の場合は
# デフォルトより強度強くするのは互換性を下げるだけのためNGとの事。ver2.3以降はmayの場合指定しても無視してくれるらしい
smtpd_tls_ciphers = high    #サーバ側
smtp_tls_ciphers = high # クライアント側

# それぞれのSuite
# highでもaNULLが使える。aNULLを追加/削除してALLで再度追加。
# (一見無意味だが一度削除したものは暗号化スイート一覧の最初に表示されるらしい。)
# よく見るとexport〜highは同じに見える。ここを弄るのは非推奨らしいが新しいverだと違うのだろうか。
tls_export_cipherlist = aNULL:-aNULL:ALL:+RC4:@STRENGTH
tls_high_cipherlist = aNULL:-aNULL:ALL:!EXPORT:!LOW:!MEDIUM:+RC4:@STRENGTH
tls_low_cipherlist = aNULL:-aNULL:ALL:!EXPORT:+RC4:@STRENGTH
tls_medium_cipherlist = aNULL:-aNULL:ALL:!EXPORT:!LOW:+RC4:@STRENGTH
tls_null_cipherlist = eNULL:!aNULL

# 最初こっちで試した。
# 送る際に証明書検証を強制。後で平文のみ対応のSMTPサーバ/検証失敗SMTPサーバに送れなくなった事に気が付いた。
# 以下だと「Verified TLS connection established」とログ出力が異なる
smtp_tls_security_level = verify


# 参考で見かけたが不要か判断つかなかたったもの。本家解説にはv2.2以降とあり、使えないはずだがpostconfに映るので多分必要では。
# CAPathとCAfileの2パターンあるが、ローカルPKI対応が不要ならCAfileの方が無難。
smtpd_tls_CAfile = /etc/pki/tls/certs/ca-bundle.crt

# できればTLSする(may)で設定する以上、smtp(送信)の検証は一旦不要と思う。
smtp_tls_CAfile (デフォルト: empty)

★その他main.cfの設定(環境提示) ----- * ----- * ----- * ----- * ----- *
myhostname = mail.an-net.tokyo 
inet_interfaces = all
inet_protocols = ipv4
mydomain = an-net.tokyo
mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain, foo.an-net.tokyo, bar.an-net.tokyo
home_mailbox = Maildir/

■ postfixの設定[送信側：c7-02.home] -------------------------------------------------
myhostname = c7-02.home
smtpd_tls_loglevel = 1
smtpd_tls_security_level = may
smtpd_tls_cert_file = /etc/postfix/server.crt # オレオレ。mail.an-net.tokyo -> c7-02のTLSができる確認用。
smtpd_tls_key_file = /etc/postfix/server.key # オレオレ
smtpd_tls_CAfile = /etc/pki/tls/certs/ca-bundle.crt

smtp_tls_security_level = verify
smtp_tls_loglevel  = 1
smtp_tls_CAfile = /etc/pki/tls/certs/ca-bundle.crt
smtp_tls_exclude_ciphers = aNULL

■文法チェック
postfix check
postconf | egrep ^smtp[d]*_tls
diff main.cf ./backup


■postfix起動
systemctl start postfix
systemctl status postfix

■まずはローカルで確認
[root@c7-01 mail.an-net.tokyo]# telnet localhost 25
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 mail.an-net.tokyo ESMTP Postfix
EHLO localhost
250-mail.an-net.tokyo ★myhostname
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS ★STARTTLS
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN

■受信用ユーザ作成
useradd foodom  # foo.an-net.tokyo受信用
useradd bardom  # bar.an-net.tokyo受信用

■確認
# トラストチェーン確認
openssl s_client -connect  mail.an-net.tokyo:25 -starttls smtp   #OK
openssl s_client -connect c7-02.home:25 -quiet -starttls smtp   #オレオレなのでNG
verify return:0であることverify errorがないこと # オレオレは1でいい

# 受信： 証明書検証がうまくいくこと。TLS通信がされること
echo "Recv" | mail -s "starttls test to mail.an-net.tokyo" -r vagrant@c7-02.home foodom@foo.an-net.tokyo
echo "Recv" | mail -s "starttls test to mail.an-net.tokyo" -r vagrant@c7-02.home bardom@bar.an-net.tokyo

# 送信： TLS通信がされること (オレオレなので証明書検証はこける)
echo "Send" | mail -s "starttls test from mail.an-net.tokyo" -r bardom@bar.an-net.tokyo vagrant@c7-02.home 

・今回は自PC内VMのため使えないが、checkサイトも本利用では活用
https://ssl-tools.net/mailservers

■結果(検証OK)
# To： foo.an-net.tokyo ( Verified TLS connection established)  ※この時はsmtp_tls_security_level = verifyで試している
Oct  3 20:10:47 c7-02 postfix/pickup[6549]: EC07857AF02: uid=0 from=<vagrant@c7-02.home>
Oct  3 20:10:47 c7-02 postfix/cleanup[7121]: EC07857AF02: message-id=<5f785c37.zkoM/e8B9cUFBVJX%vagrant@c7-02.home>
Oct  3 20:10:47 c7-02 postfix/qmgr[6550]: EC07857AF02: from=<vagrant@c7-02.home>, size=449, nrcpt=1 (queue active)
Oct  3 20:10:47 c7-02 postfix/smtp[7123]: Verified TLS connection established to mail.an-net.tokyo[192.168.0.152]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  3 20:10:47 c7-02 postfix/smtp[7123]: EC07857AF02: to=<foodom@foo.an-net.tokyo>, relay=mail.an-net.tokyo[192.168.0.152]:25, delay=0.01, delays=0/0/0.01/0, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as ED42C4C80E6)
Oct  3 20:10:47 c7-02 postfix/qmgr[6550]: EC07857AF02: removed

# smtp_tls_security_level = mayの場合はTrusted TLS connection established
Oct  4 02:15:30 c7-02 postfix/pickup[14222]: 1CC0457AF18: uid=0 from=<vagrant@c7-02.home>
Oct  4 02:15:30 c7-02 postfix/cleanup[14232]: 1CC0457AF18: message-id=<5f78b1b2.0k8XAsFslpAn2On2%vagrant@c7-02.home>
Oct  4 02:15:30 c7-02 postfix/qmgr[14223]: 1CC0457AF18: from=<vagrant@c7-02.home>, size=449, nrcpt=1 (queue active)
Oct  4 02:15:30 c7-02 postfix/smtp[14234]: Trusted TLS connection established to mail.an-net.tokyo[192.168.0.152]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  4 02:15:30 c7-02 postfix/smtp[14234]: 1CC0457AF18: to=<foodom@foo.an-net.tokyo>, relay=mail.an-net.tokyo[192.168.0.152]:25, delay=0.03, delays=0.01/0.01/0.01/0, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as 22ACC4C80E6)
Oct  4 02:15:30 c7-02 postfix/qmgr[14223]: 1CC0457AF18: removed

# To：bar.an-net.tokyo(Verified TLS connection established )※この時はsmtp_tls_security_level = verifyで試している
Oct  3 19:44:49 c7-02 postfix/pickup[6549]: 54C5157AF1C: uid=0 from=<vagrant@c7-02.home>
Oct  3 19:44:49 c7-02 postfix/cleanup[6619]: 54C5157AF1C: message-id=<5f785621.BFoYwYkoUhpygsGK%vagrant@c7-02.home>
Oct  3 19:44:49 c7-02 postfix/qmgr[6550]: 54C5157AF1C: from=<vagrant@c7-02.home>, size=449, nrcpt=1 (queue active)
Oct  3 19:44:49 c7-02 postfix/smtp[6621]: Verified TLS connection established to mail.an-net.tokyo[192.168.0.152]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  3 19:44:49 c7-02 postfix/smtp[6621]: 54C5157AF1C: to=<bardom@bar.an-net.tokyo>, relay=mail.an-net.tokyo[192.168.0.152]:25, delay=0.01, delays=0/0/0.01/0, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as 568774C80E6)
Oct  3 19:44:49 c7-02 postfix/qmgr[6550]: 54C5157AF1C: removed




# オレオレへの発信(certificate verification failed/Untrusted TLS connection established) ※この時はsmtp_tls_security_level = verifyで試しているので失敗(deferred)
Oct  3 19:41:13 c7-01 postfix/pickup[18272]: 0E6B42E31: uid=0 from=<bardom@bar.an-net.tokyo>
Oct  3 19:41:13 c7-01 postfix/cleanup[18278]: 0E6B42E31: message-id=<5f785549.4IVDW3YhFzTR4vwZ%bardom@bar.an-net.tokyo>
Oct  3 19:41:13 c7-01 postfix/qmgr[18273]: 0E6B42E31: from=<bardom@bar.an-net.tokyo>, size=461, nrcpt=1 (queue active)
Oct  3 19:41:13 c7-01 postfix/smtp[18280]: certificate verification failed for c7-02.home[192.168.0.153]:25: self-signed certificate
Oct  3 19:41:13 c7-01 postfix/smtp[18280]: Untrusted TLS connection established to c7-02.home[192.168.0.153]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  3 19:41:13 c7-01 postfix/smtp[18280]: 0E6B42E31: to=<vagrant@c7-02.home>, relay=c7-02.home[192.168.0.153]:25, delay=0.02, delays=0.01/0.01/0/0, dsn=4.7.5, status=deferred (Server certificate not trusted)

# オレオレへの発信(Untrusted TLS connection established) ※この時はsmtp_tls_security_level = mayなので成功
Oct  4 01:30:25 c7-01 postfix/pickup[11677]: 0C49F4C80E6: uid=0 from=<bardom@bar.an-net.tokyo>
Oct  4 01:30:25 c7-01 postfix/cleanup[15947]: 0C49F4C80E6: message-id=<5f78a721.WJgJnzX88MdEDzEw%bardom@bar.an-net.tokyo>
Oct  4 01:30:25 c7-01 postfix/qmgr[11678]: 0C49F4C80E6: from=<bardom@bar.an-net.tokyo>, size=463, nrcpt=1 (queue active)
Oct  4 01:30:25 c7-01 postfix/smtp[15949]: Untrusted TLS connection established to c7-02.home[192.168.0.153]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  4 01:30:25 c7-01 postfix/smtp[15949]: 0C49F4C80E6: to=<vagrant@c7-02.home>, relay=c7-02.home[192.168.0.153]:25, delay=0.05, delays=0.01/0/0.03/0.01, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as 17FD357AF26)
Oct  4 01:30:25 c7-01 postfix/qmgr[11678]: 0C49F4C80E6: removed

■逆にTLS非対応に戻しpostfixへの発信　OK
Oct  4 01:14:49 c7-01 postfix/pickup[11677]: 55EEE4C80EB: uid=0 from=<bardom@bar.an-net.tokyo>
Oct  4 01:14:49 c7-01 postfix/cleanup[11771]: 55EEE4C80EB: message-id=<5f78a379.ILDGuj0bpTo06vJ+%bardom@bar.an-net.tokyo>
Oct  4 01:14:49 c7-01 postfix/qmgr[11678]: 55EEE4C80EB: from=<bardom@bar.an-net.tokyo>, size=463, nrcpt=1 (queue active)
Oct  4 01:14:49 c7-01 postfix/smtp[11773]: 55EEE4C80EB: to=<vagrant@c7-02.home>, relay=c7-02.home[192.168.0.153]:25, delay=0.05, delays=0.03/0.01/0.01/0.01, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as 5D80C79459)
Oct  4 01:14:49 c7-01 postfix/qmgr[11678]: 55EEE4C80EB: removed

■smtp_tls_security_level = verifyだと逆にTLS非対応のpostfixへの発信の場合は送れない模様。
# (deferred (TLS is required, but was not offered by host c7-02.home)
Oct  4 01:04:26 c7-01 postfix/pickup[4136]: E9A724C80EA: uid=0 from=<bardom@bar.an-net.tokyo>
Oct  4 01:04:26 c7-01 postfix/cleanup[8557]: E9A724C80EA: message-id=<5f78a10a.2X+XKQf0oOycYQHZ%bardom@bar.an-net.tokyo>
Oct  4 01:04:26 c7-01 postfix/qmgr[4137]: E9A724C80EA: from=<bardom@bar.an-net.tokyo>, size=463, nrcpt=1 (queue active)
Oct  4 01:04:26 c7-01 postfix/smtp[8559]: E9A724C80EA: to=<vagrant@c7-02.home>, relay=c7-02.home[192.168.0.153]:25, delay=0, delays=0/0/0/0, dsn=4.7.4, status=deferred (TLS is required, but was not offered by host c7-02.home[192.168.0.153])

■myhostnameが証明書名と違う場合に証明書検証がNGになるか？
→関係ない。(ただ、SPAM判定の一助にされる場合があるそうなので、ちゃんとMXと合わせるべき)

[root@c7-02 postfix]# telnet mail.an-net.tokyo 25
Trying 192.168.0.152...
Connected to mail.an-net.tokyo.
Escape character is '^]'.
220 hoge.domain ESMTP Postfix ★hoge.domainに変更
EHLO localhost
250-hoge.domain　★hoge.domainに変更
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN
QUIT
221 2.0.0 Bye
Connection closed by foreign host.
[root@c7-02 postfix]#

# 送信
echo "Recv" | mail -s "starttls test to mail.an-net.tokyo" -r vagrant@c7-02.home foodom@foo.an-net.tokyo

■OK 送信側が証明書検証を必須としていない場合
Oct  4 02:17:18 c7-02 postfix/pickup[14222]: 4847457AF18: uid=0 from=<vagrant@c7-02.home>
Oct  4 02:17:18 c7-02 postfix/cleanup[14257]: 4847457AF18: message-id=<5f78b21e.vyE9iwHBQUKXFFcC%vagrant@c7-02.home>
Oct  4 02:17:18 c7-02 postfix/qmgr[14223]: 4847457AF18: from=<vagrant@c7-02.home>, size=449, nrcpt=1 (queue active)
Oct  4 02:17:18 c7-02 postfix/smtp[14259]: Trusted TLS connection established to mail.an-net.tokyo[192.168.0.152]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  4 02:17:18 c7-02 postfix/smtp[14259]: 4847457AF18: to=<foodom@foo.an-net.tokyo>, relay=mail.an-net.tokyo[192.168.0.152]:25, delay=0.06, delays=0.01/0.01/0.03/0.01, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as 557954C80E6)
Oct  4 02:17:18 c7-02 postfix/qmgr[14223]: 4847457AF18: removed

■証明書検証を必須の場合でもOK
Oct  4 02:18:49 c7-02 postfix/pickup[14378]: BFA0D79459: uid=0 from=<vagrant@c7-02.home>
Oct  4 02:18:49 c7-02 postfix/cleanup[14391]: BFA0D79459: message-id=<5f78b279.v9wxXaXXgqmArjkl%vagrant@c7-02.home>
Oct  4 02:18:49 c7-02 postfix/qmgr[14379]: BFA0D79459: from=<vagrant@c7-02.home>, size=448, nrcpt=1 (queue active)
Oct  4 02:18:49 c7-02 postfix/smtp[14383]: Verified TLS connection established to mail.an-net.tokyo[192.168.0.152]:25: TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits)
Oct  4 02:18:49 c7-02 postfix/smtp[14383]: BFA0D79459: to=<foodom@foo.an-net.tokyo>, relay=mail.an-net.tokyo[192.168.0.152]:25, delay=0.02, delays=0.01/0/0.01/0, dsn=2.0.0, status=sent (250 2.0.0 Ok: queued as C13B04C80E6)
Oct  4 02:18:49 c7-02 postfix/qmgr[14379]: BFA0D79459: removed





■参考。Let's Encryptの証明書発行手順
・事前にmail.an-net.tokyoのAレコード名前解決可能とすること。
・80、443へのInternetからの到達性があること。

yum install epel-release
yum install certbot python-certbot-apache

systemctl start httpd
certbot certonly --webroot -w /var/www/html/ -d mail.an-net.tokyo

# 一部対話があったため抜粋 -----------------------------------------------------------------------
[root@ip-10-0-12-217 postfix]# certbot certonly -w /var/www/html/ -d mail.an-net.tokyo
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator webroot, Installer None
Enter email address (used for urgent renewal and security notices)
 (Enter 'c' to cancel): xxxxxxxxx@gmail.com  ★連絡先メールアドレスを入力
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org
agree in order to register with the ACME server at
https://acme-v02.api.letsencrypt.org/directory
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(A)gree/(C)ancel: A  ★規約への同意(A)

〜EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: N  ★メーリングリストへの登録(N)

How would you like to authenticate with the ACME CA?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Apache Web Server plugin (apache)
2: Spin up a temporary webserver (standalone)
3: Place files in webroot directory (webroot)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-3] then [enter] (press 'c' to cancel): 1 ★認証方法(apache経由:1)
Plugins selected: Authenticator apache, Installer None
Starting new HTTPS connection (1): acme-v02.api.letsencrypt.org
Cert not yet due for renewal

You have an existing certificate that has exactly the same domains or certificate name you requested and isn't close to expiry.
(ref: /etc/letsencrypt/renewal/mail.an-net.tokyo.conf)

What would you like to do?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: Keep the existing certificate for now
2: Renew & replace the cert (may be subject to CA rate limits)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2  ★なぜか既にあると言われたので上書き
Renewing an existing certificate
# 一部対話があったため抜粋 -----------------------------------------------------------------------


■ここにできる
[root@ip-10-0-12-217 postfix]# ll /etc/letsencrypt/live
total 4
drwxr-xr-x. 2 root root  93 Oct  2 15:13 mail.an-net.tokyo
-rw-r--r--. 1 root root 740 Oct  2 15:11 README

[root@ip-10-0-12-217 postfix]# ll /etc/letsencrypt/live/mail.an-net.tokyo/
total 4
lrwxrwxrwx. 1 root root  41 Oct  2 15:13 cert.pem -> ../../archive/mail.an-net.tokyo/cert2.pem
lrwxrwxrwx. 1 root root  42 Oct  2 15:13 chain.pem -> ../../archive/mail.an-net.tokyo/chain2.pem
lrwxrwxrwx. 1 root root  46 Oct  2 15:13 fullchain.pem -> ../../archive/mail.an-net.tokyo/fullchain2.pem
lrwxrwxrwx. 1 root root  44 Oct  2 15:13 privkey.pem -> ../../archive/mail.an-net.tokyo/privkey2.pem
-rw-r--r--. 1 root root 692 Oct  2 15:11 README
[root@ip-10-0-12-217 postfix]#

# Let's Encryptが自動生成する各ファイル
privkey.pem 秘密鍵
cert.pem 証明書
chain.pem 中間証明書
 fullchain.pem 証明書と中間証明書を連結したファイル


■権限はちゃんと絞ってある
[root@ip-10-0-12-217 postfix]# ll /etc/letsencrypt/archive/mail.an-net.tokyo/
total 32
-rw-r--r--. 1 root root 1915 Oct  2 15:11 cert1.pem
-rw-r--r--. 1 root root 1915 Oct  2 15:13 cert2.pem
-rw-r--r--. 1 root root 1647 Oct  2 15:11 chain1.pem
-rw-r--r--. 1 root root 1647 Oct  2 15:13 chain2.pem
-rw-r--r--. 1 root root 3562 Oct  2 15:11 fullchain1.pem
-rw-r--r--. 1 root root 3562 Oct  2 15:13 fullchain2.pem
-rw-------. 1 root root 1704 Oct  2 15:11 privkey1.pem
-rw-------. 1 root root 1704 Oct  2 15:13 privkey2.pem
[root@ip-10-0-12-217 postfix]#

■Let's Encrptの継続利用はしないのでapache停止
systemctl stop httpd
systemctl status httpd

# 中間証明書のインポートが必要なら行う。古いOSだといると思われる
# cert dl
curl https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt \
-o /tmp/lets-encrypt-x3-cross-signed.pem
# bk
cd /etc/pki/ca-trust/extracted
tar cvf crt.tar *
# upate
cp /tmp/lets-encrypt-x3-cross-signed.pem /etc/pki/ca-trust/source/anchors
 update-ca-trust extract


